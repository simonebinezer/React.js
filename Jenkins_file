pipeline {
    agent any
        SONARQUBE_SCANNER_HOME = tool name: 'SonarQubeScanner
' // Matches the configured scanner tool in Jenkins
        SONAR_PROJECT_KEY = 'React.js'                // Unique identifier for the project
        GITHUB_REPO = 'https://github.com/simonebinezer/CSAT'
        SONAR_HOST_URL = 'http://localhost:9099'          // SonarQube server address
        SONAR_TOKEN = credentials('CSAT_Code')         // Jenkins credentials storing the SonarQube token

    stages {
        stage('Checkout SCM') {
            steps {
                // Removed credentialsId since it's not required for a public repository
                git branch: 'main',
                    url: 'https://github.com/simonebinezer/React.js.git'
            }
        }
        stage('Prepare Local Directory') {
            steps {
                script {
                    echo 'Copying code to local directory...'
                }
                bat '''
                mkdir "C:\\React Code"
                xcopy /E /I /Y . "C:\\React Code"
                '''
            }
        }
        stage('Install Dependencies') {
            steps {
                // Use 'bat' for Windows or 'sh' for Linux/MacOS
                bat 'npm install' // Change to 'sh' if running on Linux/MacOS
            }
        }
        stage('SonarQube Analysis') {
            environment {
                SONAR_SCANNER_HOME = tool 'SonarQubeScanner'
            }
            steps {
                // Adjust the SonarQube scanner command based on your environment
                bat "${env.SONAR_SCANNER_HOME}\\bin\\sonar-scanner.bat -Dsonar.projectKey=ReactProject -Dsonar.sources=./src"
            }
        }
        stage('Quality Gate') {
            steps {
                script {
                    // Wait for SonarQube Quality Gate result
                    timeout(time: 10, unit: 'MINUTES') {
                        waitForQualityGate abortPipeline: true
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'Pipeline execution completed!'
        }
    }
}
