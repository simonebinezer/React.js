pipeline {
    agent any
    environment {
        SONAR_PROJECT_KEY = 'React.js'
        GITHUB_REPO = 'https://github.com/simonebinezer/React.js'
        SONAR_HOST_URL = 'http://18.237.49.246:9000'
        SONAR_TOKEN = credentials('Sonar_Token') // Replace with the ID of your SonarQube token
        TARGET_SERVER = "ec2-user@ec2-34-220-228-240.us-west-2.compute.amazonaws.com" // Replace with your target server
        SSH_KEY = credentials('jenkins')  // Jenkins credential ID for SSH key
        DEPLOY_DIR = "/var/www/html/sample-app" // Directory where the app will be deployed
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: "${GITHUB_REPO}"
            }
        }
        stage('Run SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    script {
                        // Using Jenkins-managed SonarScanner
                        def scannerHome = tool name: 'SonarQube_Scanner'
                        sh """
                            ${scannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                            -Dsonar.host.url=${SONAR_HOST_URL} \
                            -Dsonar.login=${SONAR_TOKEN} \
                            -X
                        """
                    }
                }
            }
        }
        stage('Deploy README.md') {
            steps {
                sshagent(credentials: ["${SSH_KEY}"]) {
                    script {
                        // Copy README.md file to the target server
                        sh """
                        scp README.md ${TARGET_SERVER}:${DEPLOY_DIR}/README.md
                        ssh ${TARGET_SERVER} <<EOF
                        sudo chown www-data:www-data ${DEPLOY_DIR}/README.md
                        sudo systemctl restart apache2
                        EOF
                        """
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'Pipeline execution completed!'
        }
        failure {
            echo 'Pipeline failed. Check the logs for details.'
        }
    }
}
